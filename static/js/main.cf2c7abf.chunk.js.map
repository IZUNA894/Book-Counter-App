{"version":3,"sources":["context/bookContext.js","components/bookList.js","components/bookForm.js","components/navbar.js","App.js","serviceWorker.js","index.js"],"names":["BookContext","createContext","BookContextProvider","props","useState","id","title","author","books","setBooks","Provider","value","addBooks","Math","random","deleteBooks","booksObj","filter","book","children","BookList","useContext","map","onClick","className","BookForm","setAuthor","setTitle","onSubmit","e","preventDefault","console","log","type","onChange","target","handleChangeTitle","placeholder","handleChangeAuthor","Navbar","length","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2MAEaA,EAAcC,0BA0BZC,EAxBY,SAACC,GAAS,IAAD,EACZC,mBAAS,CAC5B,CAACC,GAAG,EAAEC,MAAM,aAAaC,OAAO,eAChC,CAACF,GAAG,EAAEC,MAAM,cAAcC,OAAO,WACjC,CAACF,GAAG,EAAEC,MAAM,WAAWC,OAAO,mBAJC,mBAC9BC,EAD8B,KACxBC,EADwB,KAiBnC,OACI,kBAACT,EAAYU,SAAb,CAAsBC,MAAO,CAACH,QAAMI,SAXzB,SAACN,EAAMC,GAClBE,EAAS,GAAD,mBAAKD,GAAL,CAAW,CAACH,GAAGQ,KAAKC,SAASP,SAAOD,aAUCS,YAR/B,SAACV,GACf,IAAIW,EAAWR,EAAMS,QAAO,SAACC,GACzB,OAAOA,EAAKb,KAAOA,KAEvBI,EAAS,YAAIO,OAKRb,EAAMgB,WCFDC,EAlBE,WAAK,IAAD,EACkBC,qBAAWrB,GAAzCQ,EADY,EACZA,MAAeO,GADH,EACNH,SADM,EACGG,aAChBC,EAAWR,EAAMc,KAAI,SAACJ,GACtB,OACI,wBAAIK,QAAW,kBAAIR,EAAYG,EAAKb,MAAMa,EAAKZ,MAAM,6BAArD,WACaY,EAAKX,WAI1B,OACI,yBAAKiB,UAAU,aACX,4BACKR,KC2BFS,EAvCE,WAAK,IAAD,EACMJ,qBAAWrB,GAA7BQ,EADY,EACZA,MAAMI,EADM,EACNA,SADM,EAESR,mBAAS,IAFlB,mBAEZG,EAFY,KAELmB,EAFK,OAGMtB,mBAAS,IAHf,mBAGZE,EAHY,KAGNqB,EAHM,KAoBFnB,EAAMc,KAAI,SAACJ,GACtB,OACI,4BACA,yBAAKM,UAAU,SAASN,EAAKZ,OAC7B,yBAAKkB,UAAU,UAAf,WAAiCN,EAAKX,YAK9C,OACI,0BAAMqB,SAnBS,SAACC,GAChBA,EAAEC,iBACY,KAAXvB,GAA2B,KAAVD,IAEpByB,QAAQC,IAAIH,GACZjB,EAASN,EAAMC,GACfmB,EAAU,IACVC,EAAS,OAcL,2BAAOM,KAAK,OAAOC,SAAU,SAACL,GAAD,OAxBb,SAACA,GACrBF,EAASE,EAAEM,OAAOxB,OAuBoByB,CAAkBP,IAAIQ,YAAY,mBAAmB1B,MAAOL,IAC9F,2BAAO2B,KAAK,OAAOC,SAAU,SAACL,GAAD,OA5BZ,SAACA,GACtBH,EAAUG,EAAEM,OAAOxB,OA2BmB2B,CAAmBT,IAAIQ,YAAY,oBAAoB1B,MAAOJ,IAChG,2BAAO0B,KAAK,SAAStB,MAAM,eCrBxB4B,EAbA,WAAK,IACX/B,EAASa,qBAAWrB,GAApBQ,MAGL,OACI,yBAAKgB,UAAU,UACX,gDACA,2BAAKhB,EAAMgC,OAAQ,EAAd,mBAA8BhC,EAAMgC,OAApC,YAAuD,2BCUzDC,MAdf,WACE,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MAEA,kBAAC,EAAD,MAEA,kBAAC,EAAD,SCFYkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,a","file":"static/js/main.cf2c7abf.chunk.js","sourcesContent":["import React,{Component,useState,createContext} from 'react';\r\n\r\nexport const BookContext = createContext();\r\n\r\nconst BookContextProvider =(props)=>{\r\n var [books,setBooks] = useState([\r\n     {id:1,title:\"Noah's ark\",author:\"Christopher\"},\r\n     {id:2,title:\"Last symbol\",author:\"Lenardo\"},\r\n     {id:3,title:\"Red soul\",author:\"Tony Cherrind\"}\r\n     \r\n ]);\r\n var addBooks = (title,author)=>{\r\n     setBooks([...books,{id:Math.random(),author,title}]);\r\n }\r\n var deleteBooks = (id)=>{\r\n     var booksObj = books.filter((book)=>{\r\n         return(book.id !== id)\r\n     })\r\n     setBooks([...booksObj]);\r\n }\r\n\r\n return(\r\n     <BookContext.Provider value={{books,addBooks,deleteBooks}}>\r\n         {props.children}\r\n     </BookContext.Provider>\r\n )\r\n}\r\n\r\nexport default BookContextProvider\r\n","import React ,{useContext} from 'react';\r\nimport {BookContext} from \"../context/bookContext\";\r\n\r\nconst BookList = ()=>{\r\n    var {books,addBooks,deleteBooks} = useContext(BookContext);\r\n    var booksObj = books.map((book)=>{\r\n        return(\r\n            <li onClick = {()=>deleteBooks(book.id)}>{book.title}<br/>\r\n                author:-{book.author}</li>\r\n        )\r\n    })\r\n\r\n    return(\r\n        <div className=\"book-list\">\r\n            <ul  >\r\n                {booksObj}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BookList","import React ,{useContext,useState} from 'react';\r\nimport {BookContext} from \"../context/bookContext\";\r\n\r\nconst BookForm = ()=>{\r\n    var {books,addBooks} = useContext(BookContext);\r\n    var [author,setAuthor]  = useState('')\r\n    var [title,setTitle] = useState('');\r\n\r\n    var handleChangeAuthor = (e)=>{\r\n        setAuthor(e.target.value);\r\n    }\r\n    var handleChangeTitle = (e)=>{\r\n        setTitle(e.target.value);\r\n    }\r\n    var handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n        if(author === \"\" || title === '')\r\n        return;\r\n        console.log(e);\r\n        addBooks(title,author);\r\n        setAuthor('');\r\n        setTitle('');\r\n    }\r\n    var booksObj = books.map((book)=>{\r\n        return(\r\n            <li>\r\n            <div className=\"title\">{book.title}</div>\r\n            <div className=\"author\">author:-{book.author}</div>\r\n            </li>\r\n        )\r\n    })\r\n\r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n\r\n            <input type=\"text\" onChange={(e)=>handleChangeTitle(e)} placeholder=\"Enter Book title\" value={title}/>\r\n            <input type=\"text\" onChange={(e)=>handleChangeAuthor(e)} placeholder=\"Enter Book author\" value={author}/>\r\n            <input type=\"submit\" value=\"Add Book\"/>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default BookForm","import React ,{useContext} from 'react';\r\nimport {BookContext} from \"../context/bookContext\";\r\n\r\nconst Navbar = ()=>{\r\n    var {books} = useContext(BookContext);\r\n    \r\n\r\n    return(\r\n        <div className=\"navbar\" >\r\n            <h1>Book Counter App</h1>\r\n            <p>{ books.length >0 ? `you have ${books.length} to read` : 'no books left to read' }</p>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React from 'react';\nimport BookList from \"./components/bookList\"\nimport BookForm from \"./components/bookForm\";\nimport BookContextProvider from \"./context/bookContext\";\nimport Navbar from \"./components/navbar\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BookContextProvider>\n        <Navbar/>\n        \n        <BookList/>\n        \n        <BookForm/>\n      </BookContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}